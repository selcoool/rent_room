services:

  db:
    image: mysql:latest
    restart: always
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - rent_room_network

  ui_react:
    container_name: ui_react
    restart: unless-stopped
    build:
      context: ./ui_react
    ports:
      - "4000:4000"
    networks:
      - rent_room_network
    environment:
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - db


  api_node:
    container_name: api_node
    restart: unless-stopped
    build:
      context: ./api_node
    ports:
      - "9000:9000"
    networks:
      - rent_room_network
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db

volumes:
  db_data:

networks:
  rent_room_network:
    driver: bridge



# services:

#   # app:
#   #   image: 'jc21/nginx-proxy-manager:latest'
#   #   restart: unless-stopped
#   #   ports:
#   #     - '80:80'
#   #     - '81:81'
#   #     - '443:443'
#   #   volumes:
#   #     - ./data:/data
#   #     - ./letsencrypt:/etc/letsencrypt

#   db:
#     image: mysql:latest
#     restart: always
#     container_name: mysql_container
#     environment:
#       # MYSQL_ROOT_PASSWORD: 159753
#       # MYSQL_DATABASE: test_data

#       MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#       MYSQL_DATABASE: ${MYSQL_DATABASE}
#     ports:
#       - "3306:3306"
#     volumes:
#       - db_data:/var/lib/mysql
#     networks:
#       - rent_room_network

#   ui_react:
#     container_name: ui_react
#     restart: unless-stopped
#     build:
#       context: ./ui_react
#     ports:
#       - "4000:4000"
#     networks:
#       - rent_room_network
#     environment:
#       - NODE_ENV=production

#   api_node:
#     container_name: api_node
#     restart: unless-stopped
#     # env_file: .api_node/.env
#     build:
#       context: ./api_node
#     ports:
#       - "9000:9000"
#     networks:
#       - rent_room_network
#     environment:
#       - NODE_ENV: ${NODE_ENV}
#       - DATABASE_URL: ${DATABASE_URL}
#       # - DATABASE_URL=mysql://root:159753@mysql_container:3306/test_data
#     depends_on:
#       - db

# volumes:
#   db_data:

# networks:
#   rent_room_network:
#     driver: bridge









# services:

#   # app:
#   #   image: 'jc21/nginx-proxy-manager:latest'
#   #   restart: unless-stopped
#   #   ports:
#   #     - '80:80'
#   #     - '81:81'
#   #     - '443:443'
#   #   volumes:
#   #     - ./data:/data
#   #     - ./letsencrypt:/etc/letsencrypt

#   db:
#     image: mysql:latest
#     container_name: mysql_container
#     environment:
#       MYSQL_ROOT_PASSWORD: 159753
#       MYSQL_DATABASE: test_data
#       MYSQL_USER: root
#       MYSQL_PASSWORD: 159753
#     ports:
#       - "3306:3306"
#     volumes:
#       - db_data:/var/lib/mysql
#     networks:
#       - rent_room_network

#   ui_react:
#     container_name: ui_react
#     build:
#       context: ./ui_react
#     ports:
#       - "4000:4000"
#     networks:
#       - rent_room_network
#     environment:
#       - NODE_ENV=production

#   api_node:
#     container_name: api_node
#     build:
#       context: ./api_node
#     ports:
#       - "9000:9000"
#     networks:
#       - rent_room_network
#     environment:
#       - NODE_ENV=production
#     depends_on:
#       - db

# volumes:
#   db_data:

# networks:
#   rent_room_network:
#     driver: bridge











# # version: '3'
# services:

#   # app:
#   #   image: 'jc21/nginx-proxy-manager:latest'
#   #   restart: unless-stopped
#   #   ports:
#   #     - '80:80'
#   #     - '81:81'
#   #     - '443:443'
#   #   volumes:
#   #     - ./data:/data
#   #     - ./letsencrypt:/etc/letsencrypt
#   db:
#     image: mysql
#     environment:
#       MYSQL_ROOT_PASSWORD: 159753
#     ports:
#       - "3306:3306"
#     networks:
#       -rent_room_network

#   ui_react:
#     container_name: ui_react
#     build:
#       context: ./ui_react
#     ports:
#       - "4000:4000"
#     networks:
#       - rent_room_network
#     environment:
#       - NODE_ENV=production

#   api_node:
#     container_name: api_node
#     build:
#       context: ./api_node
#     ports:
#       - "9000:9000"
#     networks:
#       - rent_room_network
#     environment:
#       - NODE_ENV=production

 
#     # depends_on:
#     #   - react-app
#     #   - node-app

# networks:
#   rent_room_network:
#     driver: bridge











# version: '3.8'

# name: mern-app

# services:
#   # app:
#   #   image: 'jc21/nginx-proxy-manager:latest'
#   #   restart: unless-stopped
#   #   ports:
#   #     - '80:80'
#   #     - '81:81'
#   #     - '443:443'
#   #   volumes:
#   #     - ./data:/data
#   #     - ./letsencrypt:/etc/letsencrypt


#   backend:
#     build:
#       context: ./node260724
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     volumes:
#       - ./node260724:/app
#       - /app/node_modules
#     networks:
#       - mern-app
#     ports:
#       - 8000:8000
  

#   frontend:
#     build:
#       context: ./react260724
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     networks:
#       - mern-app
#     ports:
#       - 3000:3000
#     command: npm start

# # networks:
# #   mern-app:
# #     driver: bridge











# # version: '3.8'
# # services:
# #   app:
# #     build:
# #       context: ./fr
# #     ports:
# #       - "3000:80"
# #     volumes:
# #       - ./fr:/app
# #     working_dir: /app
# #     command: ["npm", "start"]
